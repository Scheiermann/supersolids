:py:mod:`supersolids.Animation.MatplotlibAnimation`
===================================================

.. py:module:: supersolids.Animation.MatplotlibAnimation

.. autoapi-nested-parse::

   Implements an Animation with matplotlib (for Systems in 1D or 2D).



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   supersolids.Animation.MatplotlibAnimation.MatplotlibAnimation



Functions
~~~~~~~~~

.. autoapisummary::

   supersolids.Animation.MatplotlibAnimation.plot_2d
   supersolids.Animation.MatplotlibAnimation.round_z_to_0
   supersolids.Animation.MatplotlibAnimation.crop_pos_to_limits
   supersolids.Animation.MatplotlibAnimation.get_V_plot_values



.. py:class:: MatplotlibAnimation(Anim)

   Bases: :py:obj:`supersolids.Animation.Animation.Animation`

   .. py:method:: set_limits(row, col, x_min, x_max, y_min, y_max)

      Sets the plot limits appropriate,
      even if the initial wave function :math:`\psi_0` is not normalized.

      :param row: row of the subplot for the animation

      :param col: column of the subplot for the animation

      :param x_min: minimum x value of subplot

      :param x_max: maximum x value of subplot

      :param y_min: minimum y value of subplot

      :param y_max: maximum y value of subplot



   .. py:method:: set_limits_smart(row, col, System)

      Sets the plot limits appropriate,
      even if the initial wave function :math:`\psi_0` is not normalized.

      :param row: row of the subplot for the animation

      :param col: column of the subplot for the animation

      :param System: Defines the Schroedinger equation for a given problem


   .. py:method:: get_V_plot_values(i, j, System, reserve = 1.0)


   .. py:method:: animate(frame_index, System, accuracy = 10**(-6))

      Sets the plot limits appropriate,
      even if the initial wave function :math:`\psi_0` is not normalized.

      :param frame_index: Current index of frame

      :param System: Defines the Schroedinger equation for a given problem

      :param accuracy: Convergence is reached when relative error of mu is smaller
          than accuracy, where :math:`\mu = - \log(\psi_{normed}) / (2 dt)`



   .. py:method:: start(System, accuracy = 10**(-6))

      Sets the plot limits appropriate,
      even if the initial wave function :math:`\psi_0` is not normalized

      :param accuracy: Convergence is reached when relative error of mu is smaller
          than accuracy, where :math:`\mu = - \log(\psi_{normed}) / (2 dt)`

      :param System: Defines the Schroedinger equation for a given problem




.. py:function:: plot_2d(resolution=32, x_lim = (-1, 1), y_lim = (-1, 1), z_lim = (0, 1), alpha = [0.6], **kwargs)

   :param resolution: number of grid points in one direction

   :param x_lim: Limits of plot in x direction

   :param y_lim: Limits of plot in y direction

   :param z_lim: Limits of plot in z direction

   :param alpha: alpha value for plot transparency



.. py:function:: round_z_to_0(pos, func, tol = 1e-05)


.. py:function:: crop_pos_to_limits(ax, pos, func, func_val=None)


.. py:function:: get_V_plot_values(ax, pos, V, resolution, reserve = 1.0)


