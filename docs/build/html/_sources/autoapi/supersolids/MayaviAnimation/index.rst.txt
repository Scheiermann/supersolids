:mod:`supersolids.MayaviAnimation`
==================================

.. py:module:: supersolids.MayaviAnimation

.. autoapi-nested-parse::

   Functions for Potential and initial wave function :math:`\psi_0`



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   supersolids.MayaviAnimation.MayaviAnimation



Functions
~~~~~~~~~

.. autoapisummary::

   supersolids.MayaviAnimation.get_image_path
   supersolids.MayaviAnimation.axes_style
   supersolids.MayaviAnimation.animate


.. function:: get_image_path(dir_path: Path, dir_name: str = 'movie', counting_format: str = '%03d') -> Path

   Looks up all directories with matching dir_name
   and counting format in dir_path.
   Gets the highest number and returns a path with dir_name counted one up
   (prevents colliding with old data).

   Parameters

   dir_path : Path
       Path where to look for old directories (movie data)
   dir_name : str
       General name of the directories without the counter
   counting_format : str
       Format of counter of the directories

   Returns

   input_path : Path
   Path for the new directory (not colliding with old data)


.. function:: axes_style()


.. function:: animate(System: Schroedinger.Schroedinger, accuracy: float = 10**(-6), plot_psi_sol: bool = False, plot_V: bool = True, x_lim: Tuple[float, float] = (-1, 1), y_lim: Tuple[float, float] = (-1, 1), z_lim: Tuple[float, float] = (-1, 1), slice_x_index: int = 0, slice_y_index: int = 0, slice_z_index: int = 0, interactive: bool = True, camera_r_func=None, camera_phi_func=None, camera_z_func=None)

   Animates solving of the Schroedinger equations of System with mayavi in 3D.
   Animation is limited to System.max_timesteps or
   the convergence according to accuracy.

   Parameters

   System : Schroedinger.Schroedinger
       SchrÃ¶dinger equations for the specified system

   accuracy : float
       Convergence is reached when relative error of mu is smaller
       than accuracy, where :math:`\mu = - \log(\psi_{normed}) / (2 dt)`

   plot_psi_sol :
       Condition if :math:`\psi_sol` should be plotted.

   plot_V : bool
       Condition if V should be plotted.

   x_lim : Tuple[float, float]
       Limits of plot in x direction

   y_lim : Tuple[float, float]
       Limits of plot in y direction

   z_lim : Tuple[float, float]
       Limits of plot in z direction

   slice_x_index : int
       Index of grid point in x direction (in terms of System.x)
       to produce a slice/plane in mayavi,
       where :math:`\psi_{prob}` = :math:`|\psi|^2` is used for the slice

   slice_y_index : int
       Index of grid point in y  (in terms of System.y) direction
       to produce a slice/plane in mayavi,
       where :math:`\psi_{prob} = |\psi|^2` is used for the slice

   slice_z_index : int
       Index of grid point in z  (in terms of System.z) direction
       to produce a slice/plane in mayavi,
       where :math:`\psi_{prob} = |\psi|^2` is used for the slice

   interactive : bool
       Condition for interactive mode. When camera functions are used,
       then interaction is not possible. So interactive=True turn the usage
       of camera functions off.

   camera_r_func : Callable, function
       r component of the movement of the camera.

   camera_phi_func : Callable, function
       phi component of the movement of the camera.

   camera_z_func : Callable, function
       z component of the movement of the camera.

   Returns



.. py:class:: MayaviAnimation(dim: float = 3, dir_path: Path = Path(__file__).parent.joinpath('results'))

   .. attribute:: mayavi_counter
      :annotation: :int = 0

      

   .. attribute:: animate
      

      

   .. method:: create_movie(self, dir_path: Path = None, input_data_file_pattern: str = '*.png', filename: str = 'anim.mp4', delete_input: bool = True) -> None

      Creates movie filename with all matching pictures from
      input_data_file_pattern.
      By default deletes all input pictures after creation of movie
      to save disk space.

      Parameters

      dir_path : Path
          Path where to look for old directories (movie data)

      input_data_file_pattern : str
          Regex pattern to find all input data

      filename : str
          Filename with filetype to save the movie to

      delete_input : bool
          Condition if the input pictures should be deleted,
          after creation the creation of the animation as e.g. mp4

      Returns




.. data:: box
   :annotation: :Dict[str, float]

   

